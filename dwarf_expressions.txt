On evaluating DWARF expressions
===============================

DWARF expressions?
------------------
DWARF expressions are used for specifying values, or locations in memory based on the current state of a process.
They are small binary programs embedded within the DWARF debug information for a given binary file. These programs
use a special instruction set that is defined in the DWARF specification. They may refer to the memory and registers
of the process to compute their result by describing manipulations of a simple stack of values.

These expressions are produced by the compiler as part of the debug information and consumed by a debugger for use
in determining information about the process while it is executing, such as the memory location storing the value
of a variable.

See section 2.5 (and 2.7) of the DWARF specification (version 4): http://dwarfstd.org/doc/DWARF4.pdf

Why do I care?
--------------
Writing a low-level debugger implementation, I first became concerned with the need to evaluate DWARF expressions when it 
came to implementing a "Watch window", which would need to display the values of variables in the currently executing 
context.

The main elements required to examine the variable values are:
1) The declaration information for the variables defined within the program that are visible from the currently executing instruction
2) The type information of those variables (this can be quite complex)
3) The location in memory of the values to which those variables refer

OK, how do I get me some of those?
----------------------------------
The information is either provided directly within the debug information, or a way to calculate it is described there.

Declarations (1) (and their scopes within the code, including mappings to the machine code for the binary) and type
information (2) are provided directly within the DWARF debug information structures (stored in the .debug_info section of
the ELF binary file).

Location information (3) must be calculated from the DWARF location expressions. These location expressions contain a
variety of operations, which can include reading from registers, memory and the special virtual "frame base" register 
defined by DWARF. They may also call out to execute other DWARF expressions.

In order to evaluate a DWARF expression, therefore, you need to be able to:
* Read the registers of the debugged process (eg, using ptrace(PTRACE_GETREGS, ...))
* Read arbitrary memory locations within the debugged process (eg, using ptrace(PTRACE_PEEKDATA, ...), /proc/<pid>/mem or process_vm_readv)
* Calculate the value of the "frame base" register

The frame base register is calculated from another DWARF expression stored in the debug information. This time it is
attached to the function (or subprogram in DWARF parlance) that encloses the variable in question. It often requires 
the calculation of a the call frame address for the function (you guessed it, another DWARF expression, this time 
found in the DWARF debug frame information, stored in the .debug_frame or .eh_frame section of the ELF binary).

Enough! I get the idea, what about evaluating those expressions?
----------------------------------------------------------------
Actually, it's not that bad. Not compared to the some of that stuff I glossed over in the last section.
You need the expression bytes, a stack, an interpreter loop and the input state (registers, memory, and for location expressions, the frame base).

The stack needs to be able to store a bunch of 64-bit wide values which can be pushed and popped as a First-In-Last-Out
(FILO) stack.

My implementation is just an array of "enough" 64-bit unsigned integers and an index to keep track of the top of the
stack. Then combine that with operations to push, pop, peek at and count values on the stack.

Many of the operations encode values in SLEB128 and ULEB128 encoding, so you'll need a function that can encode/decode
those values -- if you've been working with ELF & DWARF at all already, you may well have these as they are used
in the file encoding as well.

The interpreter can be a simple loop with a switch statement inside. The loop iterates through the opcodes, and uses
the switch select the correct stack manipulations and calculations to perform. Once you reach the end of the expression, the
result is the value at the top of the stack.

In my evaluator I have not implemented all of the operations yet. I have left the trickier ones until later, these
include: most of the memory dereferencing opcodes (eg DW_OP_xderef) and most of the call opcodes (eg DW_OP_call2).
